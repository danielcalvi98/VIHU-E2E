# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  cypress-run:
    runs-on: ubuntu-latest
    steps:
      - name: üìù Checkout
        uses: actions/checkout@v2

      - name: ‚öæ Cache
        uses: actions/cache@v2
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: üîå Install
        run: npm install

      - name: üëå Prisma init
        run: npm run prisma:init

      - name: üèÉ Cypress run
        uses: cypress-io/github-action@v2
        with:
          build: npm run build
          start: npm start

      - name: üîÑ Prisma reset
        run: npm run prisma:reset

  react-test:
    runs-on: ubuntu-latest
    steps:
      - name: üìù Checkout
        uses: actions/checkout@v2

      - name: ‚öæ Cache
        uses: actions/cache@v2
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
    
      - name: üîå Install
        run: npm install

      - name: üñä Test
        run: npm run test

  deploy:
    runs-on: ubuntu-latest
    needs:
      - cypress-run
      - react-test
    steps:
      - name: Checkout master
        uses: actions/checkout@main

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build container image
        run: docker build -t registry.digitalocean.com/todo-app/deployment:$(echo $GITHUB_SHA | head -c7) .

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Push image to DigitalOcean Container Registry
        run: docker push registry.digitalocean.com/todo-app/deployment:$(echo $GITHUB_SHA | head -c7)

      - name: Update deployment file
        run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|registry.digitalocean.com/todo-app/deployment:'${TAG}'|' $GITHUB_WORKSPACE/templates/deployment.yaml

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 todo-production

      - name: Deploy to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/templates/deployment.yaml

      - name: Service to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/templates/service.yaml

      - name: Verify deployment
        run: kubectl rollout status deployment/todo-app